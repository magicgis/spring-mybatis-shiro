<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "
	default-lazy-init="true" default-autowire="byName">
	<context:annotation-config />
	<context:component-scan base-package="cn.tbj" />


	<!-- 两个数据源的功用配置，方便下面直接引用 -->
	<bean id="abstractXADataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close" abstract="true">
		<property name="xaDataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="poolSize" value="10" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="borrowConnectionTimeout" value="60" />
		<property name="reapTimeout" value="20" />
		<!-- 最大空闲时间 -->
		<property name="maxIdleTime" value="60" />
		<property name="maintenanceInterval" value="60" />
        <property name="loginTimeout" value="60" />
		<property name="logWriter" value="60" />
		<property name="testQuery">
			<value>select 1</value>
		</property>
	</bean>

	<!-- 线上用户数据源 -->

	<bean id="userDataSource" parent="abstractXADataSource">

		<property name="uniqueResourceName">
			<value>${cfg.user.uniqueResourceName}</value>
		</property>
		<property name="xaDataSourceClassName">
			<value>${cfg.user.xaDataSourceClassName}</value>
		</property>
		<property name="xaProperties">
			<props>
                <prop key="URL">${cfg.user.jdbcUrl}</prop>
                <prop key="user">${cfg.user.user}</prop>
                <prop key="password">${cfg.user.password}</prop>
            </props>
		</property>
		
	</bean>

	<!-- 财汇数据源 -->
	<bean id="dataDataSource" parent="abstractXADataSource">

		<property name="uniqueResourceName">
			<value>${cfg.data.uniqueResourceName}</value>
		</property>
		<property name="xaDataSourceClassName">
			<value>${cfg.data.xaDataSourceClassName}</value>
		</property>
		<property name="xaProperties">
			<props>
                <prop key="URL">${cfg.data.jdbcUrl}</prop>
                <prop key="user">${cfg.data.user}</prop>
                <prop key="password">${cfg.data.password}</prop>
            </props>
		</property>

	</bean>


	<!-- 管理平台数据源 -->
	<bean id="systemDataSource" parent="abstractXADataSource">
	
		<property name="uniqueResourceName">
			<value>${cfg.system.uniqueResourceName}</value>
		</property>
		<property name="xaDataSourceClassName">
			<value>${cfg.system.xaDataSourceClassName}</value>
		</property>
		<property name="xaProperties">
			<props>
                <prop key="URL">${cfg.system.jdbcUrl}</prop>
                <prop key="user">${cfg.system.user}</prop>
                <prop key="password">${cfg.system.password}</prop>
            </props>
		</property>

	</bean>


	<!-- 用户数据的事务管理器 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>
	<!-- JTA事务管理器 -->
	<bean id="springTransactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>
	<tx:annotation-driven transaction-manager="springTransactionManager"/> 
	<!-- 事务切面配置 
	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* cn.tbj.service*.*(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>
	<tx:annotation-driven transaction-manager="springTransactionManager"/>
	-->
	<!-- 通知配置 
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
		<tx:attributes>
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="save*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	-->

	<!-- 
	<bean id="dataSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:META-INF/mybatis/data-configuration.xml</value>
		</property>
		<property name="mapperLocations">
			<value>classpath:META-INF/mybatis/data-tables/*.xml</value>
		</property>
		<property name="dataSource" ref="dataDataSource"></property>
	</bean>


	<bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:META-INF/mybatis/user-configuration.xml</value>
		</property>
		<property name="mapperLocations">
			<value>classpath:META-INF/mybatis/user-tables/*.xml</value>
		</property>
		<property name="dataSource" ref="userDataSource"></property>
	</bean>
	-->
	
	
	<bean id="systemSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:META-INF/mybatis/system-configuration.xml</value>
		</property>
		<property name="mapperLocations">
			<value>classpath:META-INF/mybatis/system-tables/*.xml</value>
		</property>
		<property name="dataSource" ref="systemDataSource"></property>
	</bean>


</beans>